# 题意：圈圈中最后剩下的数字。0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。
# 题解：约瑟夫环问题。一群人从0:n-1围着做，杀一个人，被杀的人下一个开始计0:n-2，计算最后一个剩下的人初始时候的坐标。
# 题解1：用列表代替环，环结构用%运算来实现。这是一个动态规划问题，已知幸存者最后（当环内只剩下它一个人）的坐标0，逆推在n-1人的环中的位置。
# 但我们在讨论的时候需要从n-1推到0，从n-1到n-2可发现之后的坐标是（之前坐标-m）%（n-1+1）即f(n-1)=(f(n)-m) % n，n即len(环)，所以我们有f(n)=(f(n-1)+m)%n

class Solution:
    def lastRemaining(self, n, m):
        # inputs: n: int, m: int
        # outputs: int
        x = 0
        for i in range(n): x = (x+m)%(i+1)
        return x